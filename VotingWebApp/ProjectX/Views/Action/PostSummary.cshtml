

@using Newtonsoft.Json;
@model IEnumerable<ProjectX.Models.ResultSummary>
@{
    ViewBag.Title = "Results";
}

<h2>Voting Summary</h2>

<table class="table table-striped table-bordered table-hover">
    <thead>
        <tr>
            <td><strong>Company Name</strong></td>
            <td><strong>Clarity Points (100)</strong></td>
            <td><strong>Content Point (100)</strong></td>
            <td><strong>Delivery Point (100)</strong></td>
            <td><strong>Total Score(100)</strong></td>
            <td><strong>View Comments</strong></td>
        </tr>
    </thead>
    <tbody data-bind="foreach:currentPosts">


        <tr >
            <td data-bind=" text:CompanyName"></td>
            <td data-bind="text:ClarityScore"></td>
            <td data-bind="text:ContentScore"></td>
            <td data-bind="text:DeliveryScore"></td>
            <td data-bind="text:TotalScore"></td>
            <td><a class="text-center" data-bind="attr: { href:'Comments?CompanyName='+ CompanyName}">Comments</a></td>

            
        </tr>

    </tbody>
    <tfoot>
        <tr>
            <td colspan="2">
                <span data-bind="click:previousPage,visible:currentPage() > 1" class="glyphicon glyphicon-circle-arrow-left" style="cursor:pointer;"></span>
                <span data-bind="text:currentPage"></span>
                <span data-bind="click:nextPage,visible:currentPage() < lastPage" class="glyphicon glyphicon-circle-arrow-right" style="cursor:pointer;"></span>
            </td>
        </tr>
    </tfoot>
</table>

<script src="~/Scripts/knockout-2.3.0.js"></script>
<script>
    function PostsViewModel() {
        var self = this;

        // properties
        self.Posts= @Html.Raw(JsonConvert.SerializeObject(Model, new JsonSerializerSettings{ReferenceLoopHandling = ReferenceLoopHandling.Ignore}));
        self.FirstName = self.Posts.UserProfile;
        self.pageSize = 10;
        self.lastPage = Math.ceil(self.Posts.length / self.pageSize);
        self.currentPage = ko.observable(1);
        self.currentPosts = ko.computed(function(){
            var startIndex = (self.currentPage() - 1) * self.pageSize;
            var endIndex = startIndex + self.pageSize;
            return self.Posts.slice(startIndex, endIndex);

        });

        // methods
        self.nextPage = function(){
            self.currentPage(self.currentPage() + 1);

        };
        self.previousPage = function(){
            self.currentPage(self.currentPage() - 1);
        };



    };

    ko.applyBindings(new PostsViewModel());
</script>



